<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="P100300Mapper">
	<!-- 입고등록 : 마스터 그리드 검색 -->
	<select id="getSearch" parameterType="LDataMap" resultType="LDataMap">
		/* alexcloud.p100.p100300.getSearch */
		SELECT A.WIKEY /*입고번호*/,
		       A.EAKEY /*전자결재번호*/,
		       A.WITYPE /*입고유형*/,
		       A.WISTS /*입고상태*/,
		       A.WISCHDT /*입고요청일*/,
		       A.WIDT /*입고일*/,
		       A.COMPCD /*회사코드*/,
		       (SELECT NAME FROM P001 WITH (NOLOCK) WHERE COMPCD = A.COMPCD) COMPNM /* 회사명 */,
		       A.WHCD /*창고코드*/,
		       (SELECT NAME FROM P004 WITH (NOLOCK) WHERE COMPCD = A.COMPCD AND WHCD = A.WHCD) WHNM/* 창고명 */,
		       A.CUSTCD /*거래처코드*/,
		       (SELECT NAME FROM P003 WITH (NOLOCK) WHERE COMPCD = A.COMPCD AND ORGCD = A.ORGCD AND CUSTCD = A.CUSTCD) CUSTNM /* 거래처명 */,
		       A.ORGCD /*사업장코드*/,
		       (SELECT NAME FROM P002 WITH (NOLOCK) WHERE COMPCD = A.COMPCD AND ORGCD = A.ORGCD) ORGNM /* 사업장명 */,
		       A.VATFLG /* 과세구분 */,
		       A.CARNO /*입고차량번호*/,
		       A.DRIVER /*입고차량운전자*/,
		       A.DRIVERTEL /*입고차량운전자 연락처*/,
		       A.POKEY /*발주번호*/,
		       A.WDKEY /*입고지시번호*/,
		       A.REMARK /*비고 */,
		       A.ADDUSERCD /*등록자ID*/,
		       CONVERT(VARCHAR(50), A.ADDDATETIME, 20) ADDDATETIME /*등록일시*/,
		       A.UPDUSERCD /*수정자ID*/,
		       CONVERT(VARCHAR(50), A.UPDDATETIME, 20) UPDDATETIME /*수정일시*/,
		       A.TERMINALCD /*IP*/,
		       (SELECT COUNT(DISTINCT ITEMCD)
		          FROM TSTOCKGOODS_DTL WITH (NOLOCK) 
		         WHERE WIKEY = A.WIKEY) ITEMCNT /* 품목수 */,
		       (SELECT SUM(WIQTY)
		          FROM TSTOCKGOODS_DTL WITH (NOLOCK) 
		         WHERE WIKEY = A.WIKEY) TOTQTY /* 상태에 따른 총수량 */,
		       (SELECT SUM(SUPPLYAMT)
		          FROM TSTOCKGOODS_DTL WITH (NOLOCK) 
		         WHERE WIKEY = A.WIKEY) TOTSUPPLYAMT /* 총공급가액 */
		  FROM dbo.TSTOCKGOODS A WITH (NOLOCK)
		 WHERE A.COMPCD = #{S_COMPCD}
		<if test="S_ORGCD != null and S_ORGCD != ''">
		   AND A.ORGCD = #{S_ORGCD}
		</if>
		<if test="S_WISCHDT_FROM != null and S_WISCHDT_FROM != ''">
		   AND A.WISCHDT >= REPLACE(#{S_WISCHDT_FROM},'-','')
		</if>
		<if test="S_WISCHDT_TO != null and S_WISCHDT_TO != ''">
		   AND A.WISCHDT <![CDATA[ <= ]]> REPLACE(#{S_WISCHDT_TO},'-','')
		</if>   
		<if test="S_WIDT_FROM != null and S_WIDT_FROM != ''">
		   AND A.WIDT >= REPLACE(#{S_WIDT_FROM},'-','')
		</if>
		<if test="S_WIDT_TO != null and S_WIDT_TO != ''">
		   AND A.WIDT <![CDATA[ <= ]]> REPLACE(#{S_WIDT_TO},'-','')
		</if>
		<if test="S_CUSTCD != null and S_CUSTCD != ''">
		   AND A.CUSTCD = #{S_CUSTCD}
		</if>
		<if test="S_WISTS != null and S_WISTS != ''">
			<if test="S_WISTS == 0 ">
			   AND A.WISTS IN ('100', '99')
			</if>
			<if test="S_WISTS != 0 ">
			   AND A.WISTS = #{S_WISTS}
			</if>   
		</if>
		<if test="S_WHCD != null and S_WHCD != ''">
		   AND A.WHCD = #{S_WHCD}
		</if>
		   AND EXISTS (SELECT 1
		                 FROM TSTOCKGOODS_DTL B WITH (NOLOCK) 
		                 JOIN P006 C WITH (NOLOCK) 
		                   ON C.COMPCD = B.COMPCD
		                  AND C.ORGCD = B.ORGCD                   
		                  AND C.ITEMCD = B.ITEMCD                   
		                WHERE B.WIKEY = A.WIKEY
		<if test="S_ITEM != null and S_ITEM != ''">
		                  AND (C.ITEMCD LIKE '%' + dbo.UFX_TRIM(#{S_ITEM}) + '%' 
		                   OR C.NAME LIKE  '%' + dbo.UFX_TRIM(#{S_ITEM}) + '%')
		</if>
		<if test="S_F_USER01 != null and S_F_USER01 != ''">
		                  AND C.F_USER01 = #{S_F_USER01}
		</if>
		<if test="S_F_USER02 != null and S_F_USER02 != ''">
		                  AND C.F_USER02 = #{S_F_USER02}
		</if>
		<if test="S_F_USER03 != null and S_F_USER03 != ''">
		                  AND C.F_USER03 = #{S_F_USER03}
		</if>
		<if test="S_F_USER04 != null and S_F_USER04 != ''">
		                  AND C.F_USER04 = #{S_F_USER04}
		</if>
		<if test="S_F_USER05 != null and S_F_USER05 != ''">
		                  AND C.F_USER05 = #{S_F_USER05}
		</if>
		<if test="S_F_USER11 != null and S_F_USER11 != ''">
		                  AND C.F_USER11 = dbo.UFX_TRIM(#{S_F_USER11})
		</if>
		<if test="S_F_USER12 != null and S_F_USER12 != ''">
		                  AND C.F_USER12 = dbo.UFX_TRIM(#{S_F_USER12})
		</if>
		<if test="S_F_USER13 != null and S_F_USER13 != ''">
		                  AND C.F_USER13 = dbo.UFX_TRIM(#{S_F_USER13})
		</if>
		<if test="S_F_USER14 != null and S_F_USER14 != ''">
		                  AND C.F_USER14 = dbo.UFX_TRIM(#{S_F_USER14})
		</if>
		<if test="S_F_USER15 != null and S_F_USER15 != ''">
		                  AND C.F_USER15 = dbo.UFX_TRIM(#{S_F_USER15})
		</if>
		                   )
		<if test="S_WIKEY != null and S_WIKEY != ''">
		   	AND A.WIKEY LIKE '%' + dbo.UFX_TRIM(#{S_WIKEY}) + '%'
		</if>
		<if test="S_WITYPE != null and S_WITYPE != ''">
		   AND A.WITYPE = #{S_WITYPE}
		</if>		
		 ORDER BY A.WIKEY DESC
	</select>
	
	<!-- 입고등록 : 디테일 그리드 검색 -->
	<select id="getDetailList" parameterType="LDataMap" resultType="LDataMap">
		/* alexcloud.p100.p100300.getDetailList */
		SELECT A.WIKEY /*입고번호*/,
		       A.SEQ /*순번*/,
		       A.ITEMCD /*품목코드*/,
		       B.NAME AS ITEMNM /* 품목명 */,
		       A.ORIGINQTY /*최초입고예정수량*/, 
		       dbo.UFX_GetBoxEaQty(B.UNITTYPE, 'BOX', B.INBOXQTY, A.WIQTY)  AS WISCHQTY_BOX,
		       dbo.UFX_GetBoxEaQty(B.UNITTYPE, 'EA', B.INBOXQTY, A.WIQTY)  AS WISCHQTY_EA,
		       A.WISCHQTY /*입고예정수량*/,
		       dbo.UFX_GetBoxEaQty(B.UNITTYPE, 'BOX', B.INBOXQTY, A.WIQTY)  AS WIQTY_BOX,
		       dbo.UFX_GetBoxEaQty(B.UNITTYPE, 'EA', B.INBOXQTY, A.WIQTY)  AS WIQTY_EA,
		       A.WIQTY /*입고수량*/,
		       A.EXCHCD /*화폐단위*/,
		       A.EXCHRATE /*환율*/,
		       A.UNITPRICE /*화폐단위단가*/,
		       A.EXCHAMT /*입고금액(화폐단위)*/,
		       A.SUPPLYAMT /*입고금액(원화환산)*/,
		       A.LOT1 /*로트속성1*/,
		       A.LOT2 /*로트속성2*/,
		       A.LOT3 /*로트속성3*/,
		       A.LOT4 /*로트속성4*/,
		       A.LOT5 /*로트속성5*/,
		       A.COMPCD /*회사코드*/,
		       A.WHCD /*창고코드*/,
		       A.POKEY /*발주번호*/,
		       A.POSEQ /*발주순번*/,
		       A.PREDISTAMT /*배부전금액*/,
		       A.DISTAMT /*배부비용금액*/,
		       A.REMARK /*비고 */,
		       A.ADDUSERCD /*등록자ID*/,
		       CONVERT(VARCHAR(50), A.ADDDATETIME, 20) ADDDATETIME /*등록일시*/,
		       A.UPDUSERCD /*수정자ID*/,
		       CONVERT(VARCHAR(50), A.UPDDATETIME, 20) UPDDATETIME /*수정일시*/,
		       A.TERMINALCD, /*IP*/
		       B.F_USER01,
		       B.F_USER02,
		       B.F_USER03,
		       B.F_USER04,
		       B.F_USER05,
		       B.F_USER11,
		       B.F_USER12,
		       B.F_USER13,
		       B.F_USER14,
		       B.F_USER15,
		       B.ITEMSIZE, /* 규격 */
		       B.UNITCD /* 단위 */,
		       C.CUSTCD,		       
		       A.ORGCD,		       
		       D.NAME AS ORGNM,
		       B.INBOXQTY,
		       B.UNITTYPE<!-- ,
		       A.IFORDERNO,
		       A.IFORDERSUBNO,
		       A.IFORDERSEQ,
		       A.IFPOQTY -->     
		  FROM TSTOCKGOODS_DTL A WITH (NOLOCK)
		  JOIN P006 B WITH (NOLOCK) 
		    ON A.COMPCD = B.COMPCD
		   AND A.ORGCD = B.ORGCD
		   AND A.ITEMCD = B.ITEMCD
		  JOIN TSTOCKGOODS C WITH (NOLOCK) 
		    ON A.WIKEY = C.WIKEY
		  LEFT OUTER JOIN P002 D WITH (NOLOCK)
		    ON A.COMPCD = D.COMPCD
		   AND A.ORGCD = D.ORGCD
		 WHERE A.WIKEY = #{WIKEY}
	</select>
	
	<!-- 낱개 디테일 데이터 검색 -->
	<select id="getSearchDtl" parameterType="LDataMap" resultType="LDataMap">
		SELECT WIQTY FROM TSTOCKGOODS_DTL WHERE WIKEY = #{WIKEY} AND COMPCD = #{COMPCD} AND ORGCD = #{ORGCD} AND SEQ = #{SEQ}
	</select>

	<!-- 입고등록 : 마스터 신규 저장 -->
	<insert id="insertMst" parameterType="LDataMap">
		/* alexcloud.p100.p100300.insertMst */
		<!-- INSERT INTO TSTOCKGOODS WITH (ROWLOCK)
		  (WIKEY,
		   WITYPE,
		   WISTS,
		   WISCHDT,
		   COMPCD,
		   WHCD,
		   CUSTCD,
		   ORGCD,
		   DEPTCD,
		   USERCD,
		   VATFLG,
		   CARNO,
		   DRIVER,
		   DRIVERTEL,
		   POKEY,
		   REMARK,
		   ADDUSERCD,
		   UPDUSERCD,
		   TERMINALCD)
		VALUES
		  (#{WIKEY},
		   #{WITYPE},
		   '100', /* 최초 입고 마스터 생성 예정상태(100) */
		   REPLACE(#{WISCHDT},'-',''),
		   #{COMPCD},
		   #{WHCD},
		   #{CUSTCD},
		   #{ORGCD},
		   #{DEPTCD},
		   #{USERCD},
		   #{VATFLG},
		   #{CARNO},
		   #{DRIVER},
		   #{DRIVERTEL},
		   NULLIF(#{POKEY},''), 
		   #{REMARK},
		   #{LOGIN_USERCD},
		   #{LOGIN_USERCD},
		   #{LOGIN_IP}) -->
		   
		   INSERT INTO TSTOCKGOODS WITH (ROWLOCK)
			(
			WIKEY 
			, WITYPE
			, WISTS 
			, WIDT 
			, COMPCD 
			, WHCD 
			, CUSTCD 
			, ORGCD 
			, REMARK
			, ADDUSERCD  
			, TERMINALCD
			)
		VALUES
			(
			#{WIKEY} 
			, #{WITYPE}
			, '100'
			, CONVERT(VARCHAR, GETDATE(), 112)
			, #{COMPCD}
			, #{WHCD}
			,'0100001001'
			, #{ORGCD}
			, #{REMARK}
			, #{LOGIN_USERCD}
			, #{LOGIN_IP}
			)
	</insert>
	
	<insert id="getInventoryQty" parameterType="LDataMap" statementType="CALLABLE">
		{
			call USX_XrouteSetStock(
									'WI'
									, #{COMPCD, jdbcType = VARCHAR, mode = IN}
									, #{ORGCD, jdbcType = VARCHAR, mode = IN}
									, ''
									, '0100001001'
									, #{WHCD, jdbcType = VARCHAR, mode = IN}
									, ''
									, #{WIKEY, jdbcType = VARCHAR, mode = IN}
									, #{ITEMCD, jdbcType = VARCHAR, mode = IN}
									, ''
									, #{WIQTY, jdbcType = DECIMAL, mode = IN}
									, 'TSTOCKGOODS'
									, 'P100300'
									, #{INFO, jdbcType = VARCHAR, mode = IN}
									, #{LOGIN_USERCD, jdbcType = VARCHAR, mode = IN}
									, #{LOGIN_IP, jdbcType = VARCHAR, mode = IN}
									, #{MSGID, jdbcType = VARCHAR, mode = OUT, javaType=String}
		                  			, #{MSG, jdbcType = VARCHAR, mode = OUT, javaType=String}
								)
		}
	</insert>
	
	<!-- 입고등록 : 디테일 신규 저장 -->
	<insert id="insertDet" parameterType="LDataMap">
		/* alexcloud.p100.p100300.insertDet */
		<!-- INSERT INTO TSTOCKGOODS_DTL WITH (ROWLOCK)
		  (WIKEY,
		   SEQ,
		   ITEMCD,
		   ORIGINQTY,
		   WIQTY,
		   EXCHCD,
		   EXCHRATE,
		   UNITPRICE,
		   EXCHAMT,
		   SUPPLYAMT,
		   LOT1,
		   LOT2,
		   LOT3,
		   LOT4,
		   LOT5,
		   COMPCD,
		   ORGCD,
		   WHCD,
		   POKEY,
		   POSEQ,
		   PREDISTAMT,
		   DISTAMT, 
		   REMARK,
		   IFORDERNO,
		   IFORDERSUBNO,
		   IFORDERSEQ,
		   IFPOQTY,
		   ADDUSERCD,
		   UPDUSERCD,
		   TERMINALCD)
		VALUES
		  (#{WIKEY},
		   (SELECT ISNULL(MAX(SEQ), 0) + 1 FROM TSTOCKGOODS_DTL WITH (NOLOCK) WHERE WIKEY = #{WIKEY}),
		   #{ITEMCD},
		   #{WISCHQTY},
		   #{WIQTY},
		   'KRW',
		   1,
		   1 * ISNULL(#{UNITPRICE},0),
		   1 * ISNULL(#{UNITPRICE},0) * #{WISCHQTY},
		   1 * ISNULL(#{SUPPLYAMT},0), 
		   #{LOT1},
		   #{LOT2},
		   #{LOT3},
		   #{LOT4},
		   #{LOT5},
		   #{COMPCD},
		   #{ORGCD},
		   #{WHCD},
		   NULLIF(#{POKEY},''), 
		   NULLIF(#{POSEQ},''), 
		   #{PREDISTAMT}, /* 배부전 금액 추후 개발 */
		   #{DISTAMT}, 
		   #{REMARK},
		   #{IFORDERNO},
		   #{IFORDERSUBNO},
		   #{IFORDERSEQ},
		   #{IFPOQTY},
		   #{LOGIN_USERCD},
		   #{LOGIN_USERCD},
		   #{LOGIN_IP}) -->
		   
		   INSERT INTO TSTOCKGOODS_DTL WITH (ROWLOCK)
								(
								wikey 
								, seq 
								, ITEMCD 
								, WIQTY 
								, COMPCD 
								, ORGCD 
								, WHCD 
								, EXCHCD 
								, EXCHRATE 
								, UNITPRICE 
								, SUPPLYAMT 
								, LOT1
								, LOT2
								, LOT3
								, ADDUSERCD
								, TERMINALCD
								)
							VALUES
							  (
							  #{WIKEY}
		   					  , (SELECT ISNULL(MAX(SEQ), 0) + 1 FROM TSTOCKGOODS_DTL WITH (NOLOCK) WHERE WIKEY = #{WIKEY})
							  , #{ITEMCD}
							  , #{WIQTY}
							  , #{COMPCD}
							  , #{ORGCD}
							  , #{WHCD}
							  ,'KRW'
							  , 1
							  , 1 * ISNULL(#{UNITPRICE},0)
							  , 1 * ISNULL(#{SUPPLYAMT},0)
							  , #{LOT1}
							  , #{LOT2}
							  , #{LOT3}
							  , #{LOGIN_USERCD}
							  , #{LOGIN_IP}
							  )
	</insert>
	
	<!-- 입고등록 : 디테일 수정 -->
	<update id="updateDet" parameterType="LDataMap">
		/* alexcloud.p100.p100300.updateDet */
		  UPDATE TSTOCKGOODS_DTL WITH (ROWLOCK)
		     SET ITEMCD      = #{ITEMCD},
		         WISCHQTY    = #{WISCHQTY},
		         UNITPRICE   = 1 * ISNULL(#{UNITPRICE}, 0),
		         EXCHAMT     = 1 * ISNULL(#{UNITPRICE}, 0) * #{WISCHQTY},
		         SUPPLYAMT   = 1 * ISNULL(#{SUPPLYAMT}, 0),
		         LOT1        = #{LOT1},
		         LOT2        = #{LOT2},
		         LOT3        = #{LOT3},
		         LOT4        = #{LOT4},
		         LOT5        = #{LOT5},
		         ORGCD       = #{ORGCD},
		         WHCD        = #{WHCD},
		         REMARK      = #{REMARK},
		         UPDUSERCD   = #{LOGIN_USERCD},
		         UPDDATETIME = GETDATE(),
		         TERMINALCD  = #{LOGIN_IP}
		   WHERE WIKEY = #{WIKEY}
		     AND SEQ = #{SEQ}
	</update>
	
	<!-- 입고등록 : 마스터 수정 -->
	<update id="updateMst" parameterType="LDataMap">
		/* alexcloud.p100.p100300.updateMst */
		UPDATE TSTOCKGOODS WITH (ROWLOCK)
		   SET WITYPE      = #{WITYPE},
		       WISCHDT     = REPLACE(#{WISCHDT},'-',''),
		       WHCD        = #{WHCD},
		       CUSTCD      = #{CUSTCD},
		       DEPTCD      = #{DEPTCD},
		       USERCD      = #{USERCD},
		       VATFLG	   = #{VATFLG},
		       REMARK      = #{REMARK},
		       UPDUSERCD   = #{LOGIN_USERCD},
		       UPDDATETIME = GETDATE(),
		       TERMINALCD  = #{LOGIN_USERCD}
		 WHERE WIKEY = #{WIKEY}
		   AND WISTS = '100'
	</update>

	<!-- 입고등록 : 디테일  삭제 -->
	<delete id="deleteDet" parameterType="LDataMap">
		/* alexcloud.p100.p100300.deleteDet */
		DELETE FROM TSTOCKGOODS_DTL WITH (ROWLOCK) WHERE WIKEY = #{WIKEY} AND SEQ = #{SEQ}
	</delete>
	
	<!-- 입고등록 : 마스터 삭제(상태값 취소로 변경) -->
	<update id="updateMstSts" parameterType="LDataMap">
		/* alexcloud.p100.p100300.updateMstSts */
		UPDATE TSTOCKGOODS WITH (ROWLOCK)
		   SET WISTS = '99',
		   	   POKEY = NULL,
		   	   UPDUSERCD   = #{LOGIN_USERCD},
		       UPDDATETIME = GETDATE(),
		       TERMINALCD  = #{LOGIN_USERCD}
		 WHERE WIKEY = #{WIKEY}
		   AND WISTS = '100'
	</update>
	
	<!-- 입고등록 : atomy flg 수정 -->
	<!-- 기존 매핑방식 -> 체크 방식으로 변경, 사용 중지 2019. 04. 28
	<update id="updateAtomyFlgY" parameterType="LDataMap">
		/* alexcloud.p100.p100300.updateAtomyFlgY */
		  UPDATE INTF_ORDERSTOCK WITH (ROWLOCK)
		     SET INTF_YN	     = 'Y'
		        , WIKEY  		 = #{WIKEY}
		        , QTY 		     = #{WISCHQTY}
		        , UPDUSERCD   = #{LOGIN_USERCD}
		        , UPDDATETIME = GETDATE()
		        , TERMINALCD  = #{LOGIN_IP}
		   WHERE ORDERNO = #{IFORDERNO}
		     AND ORDERSUBNO = #{IFORDERSUBNO}
		     AND ORDERSEQ = #{IFORDERSEQ}
	</update> -->
	
	<!-- 입고등록 : atomy flg 수정 -->
	<!-- 기존 매핑방식 -> 체크 방식으로 변경, 사용 중지 2019. 04. 28
	<update id="updateAtomyFlgN" parameterType="LDataMap">
		/* alexcloud.p100.p100300.updateAtomyFlgN */
		  UPDATE INTF_ORDERSTOCK WITH (ROWLOCK)
		     SET INTF_YN = '',
		         UPDUSERCD   = #{LOGIN_USERCD},
		         UPDDATETIME = GETDATE(),
		         TERMINALCD  = #{LOGIN_IP}
		   WHERE ORDERNO = #{IFORDERNO}
		     AND ORDERSUBNO = #{IFORDERSUBNO}
		     AND ORDERSEQ = #{IFORDERSEQ}
	</update> -->
</mapper>