<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="P100200Mapper">
	<!-- 입고 인터페이스 매핑 : 젼표별 검색 -->
	<!-- <select id="getSearch" parameterType="LDataMap" resultType="LDataMap">
		/* alexcloud.p100.P100200.getSearch */
		SELECT A.WIKEY					
			 , A.WITYPE				
			 , A.WISTS				
			 , A.WISCHDT				
			 , A.WIDT				
			 , A.COMPCD				
			 , A.WHCD				
			 , G.NAME AS WHNM				
			 , A.CUSTCD				
			 , F.NAME AS CUSTNM				
			 , A.ORGCD				
			 , E.NAME AS ORGNM				
			 , A.WDKEY				
			 , A.REMARK				
			 , B.SEQ				
			 , B.ITEMCD				
			 , C.NAME AS ITEMNM				
			 , B.ORIGINQTY				
			 , B.WISCHQTY				
			 , B.WIQTY				
			 , B.EXCHCD				
			 , B.EXCHRATE				
			 , B.UNITPRICE				
			 , B.EXCHAMT				
			 , B.SUPPLYAMT				
			 , B.LOT1				
			 , B.LOT2				
			 , B.LOT3				
			 , B.LOT4				
			 , B.LOT5				
			 , B.IFORDERNO				
			 , B.IFORDERSUBNO				
			 , B.IFORDERSEQ				
			 , B.ADDUSERCD				
			 , CONVERT(VARCHAR, B.ADDDATETIME, 20) AS ADDDATETIME				
			 , B.UPDUSERCD				
			 , CONVERT(VARCHAR, B.UPDDATETIME, 20) AS UPDDATETIME				
			 , B.TERMINALCD				
		  FROM P130 A WITH (NOLOCK)					
		  JOIN P131 B WITH (NOLOCK) ON A.WIKEY = B.WIKEY					
		  JOIN P006 C WITH (NOLOCK) ON B.COMPCD = C.COMPCD AND B.ORGCD = C.ORGCD AND B.ITEMCD = C.ITEMCD 					
		  JOIN P002 E WITH (NOLOCK) ON A.COMPCD = E.COMPCD AND A.ORGCD = E.ORGCD					
		  JOIN P003 F WITH (NOLOCK) ON A.COMPCD = F.COMPCD AND A.ORGCD = F.ORGCD AND A.CUSTCD = F.CUSTCD 					
		  JOIN P004 G WITH (NOLOCK) ON A.COMPCD = G.COMPCD AND A.WHCD = G.WHCD					
		 WHERE B.IFORDERNO IS NULL		
		   AND A.COMPCD = #{S_COMPCD}
		<if test="S_ORGCD != null and S_ORGCD != ''">
		   AND A.ORGCD = #{S_ORGCD}
		</if>
		<if test="S_WHCD != null and S_WHCD != ''">
		   AND A.WHCD = #{S_WHCD}
		</if>
		<if test="S_CUSTCD != null and S_CUSTCD != ''">
		   AND A.CUSTCD = #{S_CUSTCD}
		</if>		   
		<if test="S_WISTS != null and S_WISTS != ''">
			<if test="S_WISTS == 'NOT99' ">
			   AND A.WISTS <![CDATA[ <> ]]> '99'
			</if>
			<if test="S_WISTS != 'NOT99' ">
			   AND A.WISTS = #{S_WISTS}
			</if>   
		</if>
		<if test="S_WISCHDT_FROM != null and S_WISCHDT_FROM != ''">
		   AND A.WISCHDT >= REPLACE(#{S_WISCHDT_FROM},'-','')
		</if>
		<if test="S_WISCHDT_TO != null and S_WISCHDT_TO != ''">
		   AND A.WISCHDT <![CDATA[ <= ]]> REPLACE(#{S_WISCHDT_TO},'-','')
		</if>   
		<if test="S_WIKEY != null and S_WIKEY != ''">
		   	AND A.WIKEY LIKE '%' + dbo.UFX_TRIM(#{S_WIKEY}) + '%'
		</if>
		<if test="S_ITEMCD != null and S_ITEMCD != ''">
            AND (C.ITEMCD LIKE '%' + dbo.UFX_TRIM(#{S_ITEMCD}) + '%' 
             OR C.NAME LIKE  '%' + dbo.UFX_TRIM(#{S_ITEMCD}) + '%')
		</if>
		<if test="S_F_USER01 != null and S_F_USER01 != ''">
            AND C.F_USER01 = #{S_F_USER01}
		</if>
		<if test="S_F_USER02 != null and S_F_USER02 != ''">
            AND C.F_USER02 = #{S_F_USER02}
		</if>
		<if test="S_F_USER03 != null and S_F_USER03 != ''">
             AND C.F_USER03 = #{S_F_USER03}
		</if>
		<if test="S_F_USER04 != null and S_F_USER04 != ''">
            AND C.F_USER04 = #{S_F_USER04}
		</if>
		<if test="S_F_USER05 != null and S_F_USER05 != ''">
            AND C.F_USER05 = #{S_F_USER05}
		</if>
		<if test="S_F_USER11 != null and S_F_USER11 != ''">
            AND C.F_USER11 = dbo.UFX_TRIM(#{S_F_USER11})
		</if>
		<if test="S_F_USER12 != null and S_F_USER12 != ''">
            AND C.F_USER12 = dbo.UFX_TRIM(#{S_F_USER12})
		</if>
		<if test="S_F_USER13 != null and S_F_USER13 != ''">
            AND C.F_USER13 = dbo.UFX_TRIM(#{S_F_USER13})
		</if>
		<if test="S_F_USER14 != null and S_F_USER14 != ''">
            AND C.F_USER14 = dbo.UFX_TRIM(#{S_F_USER14})
		</if>
		<if test="S_F_USER15 != null and S_F_USER15 != ''">
            AND C.F_USER15 = dbo.UFX_TRIM(#{S_F_USER15})
		</if>
		 ORDER BY A.WIKEY DESC, B.SEQ 
	</select> -->
	
	<!-- 입고 인터페이스 매핑 : 인터페이스(입고  내역) 검색 -->
	<select id="getSearch" parameterType="LDataMap" resultType="LDataMap">
		/* alexcloud.p100.p100381.getSearch */
		SELECT A.COMPCD
			 , A.ORGCD
			 , A.IDX
			 , A.ORDERNO
			 , A.ORDERSUBNO
			 , A.ORDERSEQ
			 , A.ORDERDATE
			 , A.TYPE
			 , A.MATERIALCODE
			 , A.MATERIALNAME
			 , A.PLANTCODE
			 , A.PLANTNAME
			 , A.STORAGECODE
			 , A.STORAGENAME
			 , A.STOCKCOUNT
			 , A.STOCKDATE
			 , A.COMPANYCODE
			 , A.COMPANYNAME
			 , A.MEINS
			 , A.ORDERPRICE
			 , A.TOTALPRICE
			 , A.STATUS
			 , A.OPERATEDATE
			 , A.OPERATETIME
			 , A.OPERATEID
			 , A.LOGINO
			 , A.LOGISUBNO
			 , A.TYPETEXT
			 , A.RETURNNO
			 , A.RETURNSUBNO
			 , A.RETURNMONTH
			 , A.BUYNUM
			 , A.BUYSEQ
			 , A.QTY
			 , A.RMK
			 , A.VALID_DATE
			 , A.LOT
			 , CASE WHEN A.INTF_YN = '' THEN '0'
			 		WHEN A.INTF_YN = 'Y' THEN '1'
			 		WHEN A.INTF_YN = 'S' THEN '2'
			 END AS INTF_YN
			 , A.INTF_DATE
			 , A.TRS_DATE
			 , A.INTF_RETURN_YN
			 , A.INTF_RETURN_DATE
			 , A.IN_SNO
			 , A.LOGIFLAG
			 , A.LOGISEQ
			 , A.LOGICOUNT
			 , A.OUT_SNO	
			 , CASE WHEN A.STORAGECODE = '1100' THEN '2000'
			 		WHEN A.STORAGECODE = '1180' THEN '2180'
			 		WHEN A.STORAGECODE = '1190' THEN '2190'
			 		WHEN A.STORAGECODE = '1200' THEN '4000'
			 		WHEN A.STORAGECODE = '1280' THEN '4280'
			 		WHEN A.STORAGECODE = '1290' THEN '4290'
			   END AS WHCD
			 , CASE WHEN A.STORAGECODE = '1100' THEN (SELECT NAME FROM P004 WHERE WHCD = '2000')
			 		WHEN A.STORAGECODE = '1180' THEN (SELECT NAME FROM P004 WHERE WHCD = '2180')
			 		WHEN A.STORAGECODE = '1190' THEN (SELECT NAME FROM P004 WHERE WHCD = '2190')
			 		WHEN A.STORAGECODE = '1200' THEN (SELECT NAME FROM P004 WHERE WHCD = '4000')
			 		WHEN A.STORAGECODE = '1280' THEN (SELECT NAME FROM P004 WHERE WHCD = '4280')
			 		WHEN A.STORAGECODE = '1290' THEN (SELECT NAME FROM P004 WHERE WHCD = '4290')
			   END AS WHNM
			 , CONVERT(VARCHAR(50), A.ADDDATETIME, 20) ADDDATETIME /*등록일시*/
		FROM INTF_ORDERSTOCK A WITH (NOLOCK)
		WHERE A.COMPCD = #{S_COMPCD}	
		  AND A.INTF_YN = ''	
		<if test="S_ORGCD != null and S_ORGCD != ''">
		   AND A.ORGCD = #{S_ORGCD}
		</if>
		<if test="S_WHCD != null and S_WHCD != ''">
		   AND CASE WHEN A.STORAGECODE = '1100' THEN '2000'
			 		WHEN A.STORAGECODE = '1180' THEN '2180'
			 		WHEN A.STORAGECODE = '1190' THEN '2190'
			 		WHEN A.STORAGECODE = '1200' THEN '4000'
			 		WHEN A.STORAGECODE = '1280' THEN '2280'
			 		WHEN A.STORAGECODE = '1290' THEN '2290'
			   END = #{S_WHCD}
		</if>
		<if test="S_ORDERDATE_FROM != null and S_ORDERDATE_FROM != ''">
		   AND A.ORDERDATE >= REPLACE(#{S_ORDERDATE_FROM},'-','')
		</if>
		<if test="S_ORDERDATE_TO != null and S_ORDERDATE_TO != ''">
		   AND A.ORDERDATE <![CDATA[ <= ]]> REPLACE(#{S_ORDERDATE_TO},'-','')
		</if>	 
		<if test="S_ORDERNO != null and S_ORDERNO != ''">
			AND A.ORDERNO LIKE '%' + dbo.UFX_TRIM(#{S_ORDERNO}) + '%'
		</if>
		<if test="S_CUSTCD != null and S_CUSTCD != ''">
		   AND A.COMPANYCODE = #{S_CUSTCD}
		</if>
		<if test="S_ITEMCD != null and S_ITEMCD != ''">
                  AND (A.MATERIALCODE LIKE '%' + dbo.UFX_TRIM(#{S_ITEMCD}) + '%' 
                   OR A.MATERIALNAME LIKE  '%' + dbo.UFX_TRIM(#{S_ITEMCD}) + '%')
		</if>
					
		<!-- 
		WITH T1 (
			ORDERNO, ORDERSUBNO, ORDERSEQ, WIKEY, WISEQ,
			LVL, LVLNAME, TREE
		) AS (
			SELECT 
			ORDERNO
			, ORDERSUBNO
			, ORDERSEQ
			, CONVERT(NVARCHAR(200), '1') AS WIKEY
			, CONVERT(NVARCHAR(200), '1' ) AS WISEQ
			, 1 AS LVL
			, 'PO전표' AS LVLNAME
			, CONVERT(NVARCHAR(200), '0.' + ORDERNO + '.' + ORDERSUBNO + '.' + CAST(ORDERSEQ AS NVARCHAR(10))) AS TREE
			FROM INTF_ORDERSTOCK
			WHERE ORDERDATE = '20190225'	  
		)
			SELECT ORDERNO, ORDERSUBNO, ORDERSEQ, WIKEY, WISEQ,
			 LVL, LVLNAME, TREE

			FROM T1 

			UNION ALL
			
			SELECT 
			T2.IFORDERNO AS ORDERNO
			, T2.IFORDERSUBNO AS ORDERSUBNO
			, T2.IFORDERSEQ AS ORDERSEQ
			, CONVERT(NVARCHAR(200), T2.WIKEY) AS WIKEY
			, CONVERT(NVARCHAR(200), T2.SEQ) AS WISEQ
			, T1.LVL + 1 AS LVL
			, 'WMS전표' AS LVLNAME2
			,  CONVERT(NVARCHAR(200),T1.TREE + '.' + T2.WIKEY) AS TREE
			  FROM P131 T2 WITH (NOLOCK)
			  JOIN T1 ON T1.ORDERNO = T2.IFORDERNO AND T1.ORDERSUBNO = T2.IFORDERSUBNO AND T1.ORDERSEQ = T2.IFORDERSEQ


			  ORDER BY  TREE	
		 -->
	</select>
	
	<!-- 입고 인터페이스 매핑 : ATOMY 컬럼 수정 -->
	<!-- 기존 매핑방식 -> 체크 방식으로 변경, 사용 중지 2019. 04. 28 
	<update id="updateAtomy" parameterType="LDataMap">
		/* alexcloud.p100.P100200.updateAtomy */
		UPDATE P131 WITH (ROWLOCK)
		   SET IFORDERNO     = #{ORDERNO}
		     , IFORDERSUBNO  = #{ORDERSUBNO}
		     , IFORDERSEQ    = #{ORDERSEQ}
		     , IFPOQTY       = #{MPQTY}
		     , UPDUSERCD     = #{LOGIN_USERCD}
		     , UPDDATETIME   = GETDATE()
		     , TERMINALCD    = #{LOGIN_IP}
		 WHERE WIKEY = #{MPKEY}
		   AND SEQ = #{MPSEQ}
	</update> -->
	
	<!-- 입고 인터페이스 매핑 : ATOMY ORDERSTOCK 업데이트 -->
	<update id="updateAtomyIF" parameterType="LDataMap">
		/* alexcloud.p100.P100200.updateAtomyIF */
		UPDATE INTF_ORDERSTOCK WITH (ROWLOCK)
		   SET INTF_YN	     = 'Y'
		     , WIKEY  		 = ''
		     , QTY 		     = #{QTY}
		     , RMK	 		 = #{RMK}
		     , VALID_DATE	 = #{VALIDDATE}
		     , INTF_RETURN_YN = ISNULL(#{RETURNYN}, NULL)
		     , UPDUSERCD     = #{LOGIN_USERCD}
		     , UPDDATETIME   = GETDATE()
		     , TERMINALCD    = #{LOGIN_IP}
		 WHERE COMPCD 		 = #{COMPCD} 
		   AND ORGCD 		 = #{ORGCD}
		   AND IDX     		 = #{IDX}
		   AND ORDERNO 		 = #{ORDERNO}
	</update>
	
	<!-- 입고 인터페이스 매핑 : ATOMY ORDERSTOCK_101 히스토리 INSERT -->
	<insert id="insertAtomyIFHis" parameterType="LDataMap">
	/* alexcloud.p100.P100200.insertAtomyIFHis */
		INSERT INTO INTF_ORDERSTOCK_101 
	  	(
		  	  ORDERNO
		  	, ORDERSUBNO
		  	, ORDERSEQ
		  	, ORDERDATE
		  	, TYPE
		  	, MATERIALCODE
		  	, MATERIALNAME
		  	, STOCKCOUNT 
		  	, PLANTCODE
		  	, STORAGECODE
		  	, QTY
		  	, WIKEY
		  	, ADDUSERCD
			, ADDDATETIME
			, UPDUSERCD
			, UPDDATETIME
	 		, TERMINALCD
	  	)
	  	VALUES
	  	(
	  		#{ORDERNO}
	  		, #{ORDERSUBNO}
	  		, #{ORDERSEQ}
	  		, #{ORDERDATE}
	  		, #{TYPE}
	  		, #{MATERIALCODE}
	  		, #{MATERIALNAME}
	  		, #{STOCKCOUNT}
	  		, #{PLANTCODE}
	  		, #{STORAGECODE}
	  		, #{QTY}
	  		, ''
	  		, #{LOGIN_USERCD}
	  		, GETDATE()
	  		, #{LOGIN_USERCD}
	  		, GETDATE()
	  		, #{LOGIN_IP}
	  		
	  	)
	</insert>
</mapper>