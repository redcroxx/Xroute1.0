<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<mvc:annotation-driven />
	<task:annotation-driven/>

	<!-- Controller 설정 -->
	<context:component-scan base-package="xrt">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- <bean id="POIExcelView" class="xrt.lingoframework.excel.POIExcelView" /> -->


	<!-- ViewResolver Start-->
	<!-- BeanNameViewResolver : modelAndView를 반환할 때 ViewName을 세팅하여 리턴하면 해당 beanName을 가진 view를 찾는다. 
		order값은 우선순위 지정
	-->
	<bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0" />
	</bean>
	
	<!-- InternalResourceViewResolver : Resource를 대상으로 view를 찾는다. webapp아래 자원들을 반환값으로 찾게된다. -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView" 
		p:prefix="/WEB-INF/jsp/"
		p:suffix=".jsp" />
		
	<!-- ViewResolver End-->
	
	<!-- mvc:interceptors : 컨트롤러에 들어오는 요청 HttpRequest와 컨트롤러가 응답하는 HttpResponse를 가로채는 역할을 한다. 
	Interceptor를 구현하는 방법은 2가지가 있는데, HandlerInterceptor 인터페이스를 구현하는 방법과 HandlerInterceptorAdapter 클래스를 상속 받는 방법이 있다.
	상속을 받으면 메서드가 구현되어 있으므로 사용하기 편하기 때문에 상속 받는 방법을 주로 사용하지만, HandlerInterceptor 인터페이스를 구현하기 위해서는 preHandle() , postHandle() , afterCompletion() 메서드를 구현해야 한다.
	-->
	<mvc:interceptors>
		<bean class="xrt.lingoframework.aops.ServiceIntercept" />
		<mvc:interceptor>
			<mvc:mapping path="/xrt/*/*Controller" />
			<mvc:exclude-mapping path="*/js/**" />
			<mvc:exclude-mapping path="*/css/**" />
			<ref bean="InitServiceInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<bean id="InitServiceInterceptor" class="xrt.lingoframework.aops.ServiceIntercept"/>

	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
			</list>
		</property>
	</bean>
	
	<!-- 파일업로드 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

	<!-- 트랜잭션 설정 -->
	<aop:config>
		<aop:pointcut id="requiredTx" expression="execution(* xrt..*Biz.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
			<tx:method name="set*" rollback-for="Exception" />
			<tx:method name="*" rollback-for="Exception" isolation="READ_UNCOMMITTED" />
		</tx:attributes>
	</tx:advice>
	
</beans>